{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\r\n * to use if that slot is not specified by the theme.\r\n */\r\n\r\n// Declaring a global here in case that the execution environment is Node.js (without importing the\r\n// entire node.js d.ts for now)\r\ndeclare var global: any; // tslint:disable-line:no-any\r\n\r\nexport interface IThemingInstruction {\r\n  theme?: string;\r\n  defaultValue?: string;\r\n  rawString?: string;\r\n}\r\n\r\nexport type ThemableArray = Array<IThemingInstruction>;\r\n\r\nexport interface ITheme {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface IStyleSheet {\r\n  cssText: string;\r\n}\r\n\r\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\r\n  styleSheet: IStyleSheet;\r\n}\r\n\r\ninterface IThemeState {\r\n  theme: ITheme | undefined;\r\n  lastStyleElement: IExtendedHtmlStyleElement;\r\n  registeredStyles: IStyleRecord[];\r\n  loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined;\r\n}\r\n\r\ninterface IStyleRecord {\r\n  styleElement: Element;\r\n  themableStyle: ThemableArray;\r\n}\r\n\r\n// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this\r\n// value will initialize as undefined, and later will be set once on first loadStyles injection.\r\nlet _injectStylesWithCssText: boolean;\r\n\r\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\r\n// load-themed-styles hosted on the page.\r\nconst _root: any = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any\r\n\r\nconst _themeState: IThemeState = _root.__themeState__ = _root.__themeState__ || {\r\n  theme: undefined,\r\n  lastStyleElement: undefined,\r\n  registeredStyles: []\r\n};\r\n\r\n/**\r\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\r\n */\r\n// tslint:disable-next-line:max-line-length\r\nconst _themeTokenRegex: RegExp = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\r\n\r\n/** Maximum style text length, for supporting IE style restrictions. */\r\nconst MAX_STYLE_CONTENT_SIZE: number = 10000;\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\r\n * event is fired.\r\n * @param {string | ThemableArray} styles Themable style text to register.\r\n */\r\nexport function loadStyles(styles: string | ThemableArray): void {\r\n  const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\r\n\r\n  if (_injectStylesWithCssText === undefined) {\r\n    _injectStylesWithCssText = shouldUseCssText();\r\n  }\r\n\r\n  applyThemableStyles(styleParts);\r\n}\r\n\r\n/**\r\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\r\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\r\n * a loadStyles callback that gets called when styles are loaded or reloaded\r\n */\r\nexport function configureLoadStyles(\r\n    loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined\r\n  ): void {\r\n  _themeState.loadStyles = loadStyles;\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\r\n * is fired.\r\n * @param {string} styleText Style to register.\r\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\r\n */\r\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\r\n  if (_themeState.loadStyles) {\r\n    _themeState.loadStyles(resolveThemableArray(stylesArray), stylesArray);\r\n  } else {\r\n    _injectStylesWithCssText ?\r\n      registerStylesIE(stylesArray, styleRecord) :\r\n      registerStyles(stylesArray, styleRecord);\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\r\n * replaced.\r\n * @param {theme} theme JSON object of theme tokens to values.\r\n */\r\nexport function loadTheme(theme: ITheme | undefined): void {\r\n  _themeState.theme = theme;\r\n\r\n  // reload styles.\r\n  reloadStyles();\r\n}\r\n\r\n/**\r\n * Clear already registered style elements and style records in theme_State object\r\n */\r\nexport function clearStyles(): void {\r\n  _themeState.registeredStyles.forEach((styleRecord: IStyleRecord) => {\r\n    const styleElement: HTMLStyleElement = styleRecord && styleRecord.styleElement as HTMLStyleElement;\r\n    if (styleElement && styleElement.parentElement) {\r\n      styleElement.parentElement.removeChild(styleElement);\r\n    }\r\n  });\r\n  _themeState.registeredStyles = [];\r\n}\r\n\r\n/**\r\n * Reloads styles.\r\n */\r\nfunction reloadStyles(): void {\r\n  if (_themeState.theme) {\r\n    for (const styleRecord of _themeState.registeredStyles) {\r\n      applyThemableStyles(styleRecord.themableStyle, styleRecord);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Find theme tokens and replaces them with provided theme values.\r\n * @param {string} styles Tokenized styles to fix.\r\n */\r\nexport function detokenize(styles: string | undefined): string | undefined {\r\n  if (styles) {\r\n    styles = resolveThemableArray(splitStyles(styles));\r\n  }\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\r\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\r\n */\r\nfunction resolveThemableArray(splitStyleArray: ThemableArray): string {\r\n  const { theme }: IThemeState = _themeState;\r\n  // Resolve the array of theming instructions to an array of strings.\r\n  // Then join the array to produce the final CSS string.\r\n  const resolvedArray: (string | undefined)[] = (splitStyleArray || []).map((currentValue: IThemingInstruction) => {\r\n    const themeSlot: string | undefined = currentValue.theme;\r\n    if (themeSlot) {\r\n      // A theming annotation. Resolve it.\r\n      const themedValue: string | undefined = theme ? theme[themeSlot] : undefined;\r\n      const defaultValue: string = currentValue.defaultValue || 'inherit';\r\n\r\n      // Warn to console if we hit an unthemed value even when themes are provided, unless \"DEBUG\" is false\r\n      // Allow the themedValue to be undefined to explicitly request the default value.\r\n      if (theme && !themedValue && console && !(themeSlot in theme) && (typeof DEBUG === 'undefined' || DEBUG)) {\r\n        console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue}\".`);\r\n      }\r\n\r\n      return themedValue || defaultValue;\r\n    } else {\r\n      // A non-themable string. Preserve it.\r\n      return currentValue.rawString;\r\n    }\r\n  });\r\n\r\n  return resolvedArray.join('');\r\n}\r\n\r\n/**\r\n * Split tokenized CSS into an array of strings and theme specification objects\r\n * @param {string} styles Tokenized styles to split.\r\n */\r\nexport function splitStyles(styles: string): ThemableArray {\r\n  const result: ThemableArray = [];\r\n  if (styles) {\r\n    let pos: number = 0; // Current position in styles.\r\n    let tokenMatch: RegExpExecArray | null; // tslint:disable-line:no-null-keyword\r\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\r\n      const matchIndex: number = tokenMatch.index;\r\n      if (matchIndex > pos) {\r\n        result.push({\r\n          rawString: styles.substring(pos, matchIndex)\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        theme: tokenMatch[1],\r\n        defaultValue: tokenMatch[2] // May be undefined\r\n      });\r\n\r\n      // index of the first character after the current match\r\n      pos = _themeTokenRegex.lastIndex;\r\n    }\r\n\r\n    // Push the rest of the string after the last match.\r\n    result.push({\r\n      rawString: styles.substring(pos)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Registers a set of style text. If it is registered too early, we will register it when the\r\n * window.load event is fired.\r\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\r\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\r\n */\r\nfunction registerStyles(styleArray: ThemableArray, styleRecord?: IStyleRecord): void {\r\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\r\n  const styleElement: HTMLStyleElement = document.createElement('style');\r\n\r\n  styleElement.type = 'text/css';\r\n  styleElement.appendChild(document.createTextNode(resolveThemableArray(styleArray)));\r\n\r\n  if (styleRecord) {\r\n    head.replaceChild(styleElement, styleRecord.styleElement);\r\n    styleRecord.styleElement = styleElement;\r\n  } else {\r\n    head.appendChild(styleElement);\r\n  }\r\n\r\n  if (!styleRecord) {\r\n    _themeState.registeredStyles.push({\r\n      styleElement: styleElement,\r\n      themableStyle: styleArray\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need\r\n * to register slightly differently.\r\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\r\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\r\n */\r\nfunction registerStylesIE(styleArray: ThemableArray, styleRecord?: IStyleRecord): void {\r\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\r\n  const registeredStyles: IStyleRecord[] = _themeState.registeredStyles;\r\n  let lastStyleElement: IExtendedHtmlStyleElement = _themeState.lastStyleElement;\r\n\r\n  const stylesheet: IStyleSheet | undefined = lastStyleElement ? lastStyleElement.styleSheet : undefined;\r\n  const lastStyleContent: string = stylesheet ? stylesheet.cssText : '';\r\n  let lastRegisteredStyle: IStyleRecord = registeredStyles[registeredStyles.length - 1];\r\n  const resolvedStyleText: string = resolveThemableArray(styleArray);\r\n\r\n  if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {\r\n    lastStyleElement = document.createElement('style') as IExtendedHtmlStyleElement;\r\n    lastStyleElement.type = 'text/css';\r\n\r\n    if (styleRecord) {\r\n      head.replaceChild(lastStyleElement, styleRecord.styleElement);\r\n      styleRecord.styleElement = lastStyleElement;\r\n    } else {\r\n      head.appendChild(lastStyleElement);\r\n    }\r\n\r\n    if (!styleRecord) {\r\n      lastRegisteredStyle = {\r\n        styleElement: lastStyleElement,\r\n        themableStyle: styleArray\r\n      };\r\n      registeredStyles.push(lastRegisteredStyle);\r\n    }\r\n  }\r\n\r\n  lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);\r\n  Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place\r\n\r\n  // Preserve the theme state.\r\n  _themeState.lastStyleElement = lastStyleElement;\r\n}\r\n\r\n/**\r\n * Checks to see if styleSheet exists as a property off of a style element.\r\n * This will determine if style registration should be done via cssText (<= IE9) or not\r\n */\r\nfunction shouldUseCssText(): boolean {\r\n  let useCSSText: boolean = false;\r\n\r\n  if (typeof document !== 'undefined') {\r\n    const emptyStyle: IExtendedHtmlStyleElement = document.createElement('style') as IExtendedHtmlStyleElement;\r\n\r\n    emptyStyle.type = 'text/css';\r\n    useCSSText = !!emptyStyle.styleSheet;\r\n  }\r\n\r\n  return useCSSText;\r\n}\r\n"],"sourceRoot":"..\\src"}
{"version":3,"sources":["test/injectWrapperMethod.ts"],"names":[],"mappings":";;;IACA;;;;;;OAMG;IACH,6BAAoC,OAA+B,EAAE,UAAkB,EAAE,EAAc;QACrG,IAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,OAAO,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,kCAAgC,UAAU,wDAAqD,CAAC,CAAC;QACnH,CAAC;QAED,OAAO,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,GAAG,UAAU,SAAc;YACvD,EAAE,EAAE,CAAC;YACL,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACvC,CAAC,CAAC;IACJ,CAAC;IAXD,kDAWC","file":"test/injectWrapperMethod.js","sourcesContent":["import { ReactWrapper } from 'enzyme';\n/**\n * Injects a function call prior to running a method for a component\n * rendered using enzyme deep rendering.\n * @param wrapper - The enzyme deep rendering wrapper object to modify\n * @param methodName - The name of the method to modify on the wrapper\n * @param fn - The function to run prior to the call of the original method\n */\nexport function injectWrapperMethod(wrapper: ReactWrapper<any, any>, methodName: string, fn: () => void) {\n  const originalMethod = wrapper.instance()[methodName];\n\n  if (typeof originalMethod !== 'function') {\n    throw new Error(`Tried to override the method ${methodName} on a ReactWrapper that does not have that function`);\n  }\n\n  wrapper.instance()[methodName] = function (prevProps: any) {\n    fn();\n    originalMethod.call(this, prevProps);\n  };\n}"],"sourceRoot":"../../src"}
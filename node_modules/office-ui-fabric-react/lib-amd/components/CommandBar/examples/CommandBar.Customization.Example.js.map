{"version":3,"sources":["components/CommandBar/examples/CommandBar.Customization.Example.tsx"],"names":[],"mappings":"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","file":"components/CommandBar/examples/CommandBar.Customization.Example.js","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\r\nimport { css, autobind, } from 'office-ui-fabric-react/lib/Utilities';\r\nimport styles = require('./CommandBar.Example.scss');\r\nimport { ContextualMenu, IContextualMenuItem, DirectionalHint } from '../../ContextualMenu';\r\n\r\nexport interface ISplitDropDownButtonState {\r\n  isContextMenuShown: boolean;\r\n}\r\n\r\nexport class CommandBarCustomizationExample extends React.Component<any, ISplitDropDownButtonState> {\r\n  private container: HTMLElement;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isContextMenuShown: false };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <CommandBar\r\n          isSearchBoxVisible={ false }\r\n          items={\r\n            [\r\n              {\r\n                key: 'new',\r\n                name: 'Add',\r\n                onRender: this._renderSplitButtonMenuItem,\r\n                className: 'ms-CommandBarItem',\r\n                subMenuProps: {\r\n                  items: [\r\n                    {\r\n                      key: 'emailMessage',\r\n                      name: 'Email message',\r\n                      icon: 'Mail',\r\n                      ['data-automation-id']: 'newEmailButton'\r\n                    },\r\n                    {\r\n                      key: 'calendarEvent',\r\n                      name: 'Calendar event',\r\n                      icon: 'Calendar',\r\n                      ['data-automation-id']: 'newCalendarButton'\r\n                    }\r\n                  ],\r\n                },\r\n              },\r\n            ]\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _renderSplitButtonMenuItem(item: IContextualMenuItem) {\r\n    let darkerBG = this.state.isContextMenuShown && styles.darkerBG;\r\n    let leftIconClassNames = css(\r\n      styles.icon,\r\n      styles.themeDarkAltColor,\r\n      'ms-Icon ms-Icon--Add',\r\n      darkerBG);\r\n    let dropDownIconClassNames = css(\r\n      styles.icon,\r\n      'ms-Icon ms-Icon--ChevronDown',\r\n      darkerBG);\r\n    let leftTextClassNames = css(\r\n      styles.leftText,\r\n      'ms-CommandBarItem-commandText',\r\n      darkerBG);\r\n\r\n    let containerClasName = css(\r\n      styles.customButtonContainer,\r\n      darkerBG\r\n    );\r\n\r\n    let dropDownButtonClass = css(\r\n      styles.button,\r\n      darkerBG\r\n    );\r\n    let mainBtnClassName = css(\r\n      !item.name && ('ms-CommandBarItem--noName'),\r\n      styles.button,\r\n      darkerBG\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <div className={ containerClasName } ref={ ref => this.container = ref }>\r\n          <DefaultButton\r\n            key='mainButton'\r\n            className={ mainBtnClassName }\r\n            data-is-focusable={ true }>\r\n            <span className={ leftIconClassNames } />\r\n            <span className={ leftTextClassNames }>{ 'New' }</span>\r\n          </DefaultButton>\r\n          <span className={ styles.splitter }>|</span>\r\n          <DefaultButton\r\n            key='dropDownButton'\r\n            onClick={ this.onClickChevron }\r\n            className={ dropDownButtonClass }>\r\n            <span\r\n              className={ dropDownIconClassNames }\r\n              data-is-focusable={ true } />\r\n          </DefaultButton>\r\n        </div>\r\n        {\r\n          this.state && this.state.isContextMenuShown &&\r\n          <ContextualMenu\r\n            isBeakVisible={ true }\r\n            className={ css('ms-CommandBar-menuHost') }\r\n            items={ item.subMenuProps.items }\r\n            target={ this.container }\r\n            directionalHint={ DirectionalHint.bottomAutoEdge }\r\n            onDismiss={ this.toggleDropDownMenuShown } />\r\n        }\r\n      </div >\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private onClickChevron(ev) {\r\n    ev.stopPropagation();\r\n    this.toggleDropDownMenuShown(ev);\r\n  }\r\n\r\n  @autobind\r\n  private toggleDropDownMenuShown(ev) {\r\n    this.setState({\r\n      isContextMenuShown: !this.state.isContextMenuShown\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var Utilities_1 = require("office-ui-fabric-react/lib/Utilities");
var Button_1 = require("office-ui-fabric-react/lib/Button");
var Label_1 = require("office-ui-fabric-react/lib/Label");
var ButtonSwapExample = (function (_super) {
    __extends(ButtonSwapExample, _super);
    function ButtonSwapExample() {
        var _this = _super.call(this) || this;
        _this.hasFocus = false;
        _this.buttonRef = null;
        _this.state = {
            isPrimary: true
        };
        return _this;
    }
    ButtonSwapExample.prototype.componentWillUpdate = function (nextProps, nextState) {
        // check to see if our button element has focus
        this.hasFocus = document.activeElement === this.buttonRef;
    };
    ButtonSwapExample.prototype.componentDidUpdate = function (prevProps, prevState) {
        // if our button previously had focus but we lost it
        // because we switched the control type, we need to set focus again
        if (this.hasFocus && document.activeElement !== this.buttonRef) {
            this.buttonRef.focus();
        }
    };
    ButtonSwapExample.prototype.render = function () {
        var isPrimary = this.state.isPrimary;
        var disabled = this.props.disabled;
        var text = 'Swap';
        // determine which button to render
        var button = isPrimary
            ? React.createElement(Button_1.PrimaryButton, { ref: this._setButtonRef, disabled: disabled, onClick: this._onClick }, text)
            : React.createElement(Button_1.DefaultButton, { ref: this._setButtonRef, disabled: disabled, onClick: this._onClick }, text);
        return (React.createElement("div", { className: 'ms-BasicButtonsExample' },
            React.createElement(Label_1.Label, null, "Click to swap button types"),
            button));
    };
    ButtonSwapExample.prototype._setButtonRef = function (ref) {
        this.buttonRef = ReactDOM.findDOMNode(ref);
    };
    ButtonSwapExample.prototype._onClick = function () {
        // change the button type on click
        this.setState({ isPrimary: !this.state.isPrimary });
    };
    return ButtonSwapExample;
}(React.Component));
__decorate([
    Utilities_1.autobind
], ButtonSwapExample.prototype, "_setButtonRef", null);
__decorate([
    Utilities_1.autobind
], ButtonSwapExample.prototype, "_onClick", null);
exports.ButtonSwapExample = ButtonSwapExample;

//# sourceMappingURL=Button.Swap.Example.js.map

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Utilities_1 = require("../../Utilities");
var styles = require("./ResizeGroup.scss");
var RESIZE_DELAY = 16;
var ResizeGroup = (function (_super) {
    __extends(ResizeGroup, _super);
    function ResizeGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            shouldMeasure: true,
            renderedData: null,
            measuredData: __assign({}, _this.props.data),
        };
        return _this;
    }
    ResizeGroup.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.data !== nextProps.data) {
            this.setState({
                shouldMeasure: true,
                renderedData: null,
                measuredData: __assign({}, nextProps.data)
            });
        }
    };
    ResizeGroup.prototype.componentDidMount = function () {
        this._measureItems();
        this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, { leading: true }));
    };
    ResizeGroup.prototype.render = function () {
        var _a = this.props, onRenderData = _a.onRenderData, data = _a.data;
        var _b = this.state, shouldMeasure = _b.shouldMeasure, renderedData = _b.renderedData, measuredData = _b.measuredData;
        if (Object.keys(data).length === 0) {
            return null;
        }
        return (React.createElement("div", { className: Utilities_1.css('ms-ResizeGroup'), ref: this._resolveRef('_root') },
            shouldMeasure && (React.createElement("div", { className: Utilities_1.css(styles.measured), ref: this._resolveRef('_measured') }, onRenderData(measuredData))),
            renderedData && onRenderData(renderedData)));
    };
    ResizeGroup.prototype.componentDidUpdate = function (prevProps) {
        this._measureItems();
    };
    ResizeGroup.prototype._onResize = function () {
        this.setState({ shouldMeasure: true });
    };
    ResizeGroup.prototype._measureItems = function () {
        var _this = this;
        var _a = this.props, data = _a.data, onReduceData = _a.onReduceData;
        var shouldMeasure = this.state.shouldMeasure;
        if (shouldMeasure && Object.keys(data).length !== 0 && this._root && this._measured) {
            var container = this._root.getBoundingClientRect();
            var measured = this._measured.getBoundingClientRect();
            if ((measured.width > container.width)) {
                var nextMeasuredData = onReduceData(this.state.measuredData);
                // We don't want to get stuck in an infinite render loop when there are no more
                // scaling steps, so implementations of onReduceData should return undefined when
                // there are no more scaling states to apply.
                if (nextMeasuredData !== undefined) {
                    this.setState({
                        measuredData: nextMeasuredData,
                    });
                }
                else {
                    this.setState({
                        shouldMeasure: false
                    });
                }
            }
            else {
                this.setState(function (prevState, props) {
                    return {
                        renderedData: prevState.measuredData,
                        measuredData: __assign({}, _this.props.data),
                        shouldMeasure: false
                    };
                });
            }
        }
    };
    return ResizeGroup;
}(Utilities_1.BaseComponent));
ResizeGroup.defaultProps = {
    data: {}
};
exports.ResizeGroup = ResizeGroup;

//# sourceMappingURL=ResizeGroup.js.map
